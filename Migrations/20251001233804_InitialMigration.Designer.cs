// <auto-generated />
using System;
using DataFarm.Api.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataFarm.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001233804_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataFarm.Api.Domain.Animais.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataChegada")
                        .HasColumnType("date");

                    b.Property<int>("Raca")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.MeatPrice.PrecoCarne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PrecosCarne");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Purchase.Aggregates.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Favorito")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Purchase.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DataCompra")
                        .HasColumnType("date");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Sales.Aggregates.Comprador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmpresaNome")
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Compradores");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Sales.Aggregates.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboiosMaximos")
                        .HasColumnType("integer");

                    b.Property<int>("Eixos")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<int>("MaxAnimaisPorComboio")
                        .HasColumnType("integer");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Motorista")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Sales.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompradorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("LucroTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("QtdeAnimais")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorDeVenda")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompradorId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Shared.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompraId")
                        .HasColumnType("integer");

                    b.Property<int>("EstoqueId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<double>("Quantidade")
                        .HasColumnType("double precision");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("EstoqueId");

                    b.ToTable("Insumos");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Stock.Estoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadeMaxima")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Estoques");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Animais.Animal", b =>
                {
                    b.OwnsMany("DataFarm.Api.Domain.Animais.Aggregates.Peso", "HistoricoPeso", b1 =>
                        {
                            b1.Property<int>("AnimalId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateOnly>("DataRegistro")
                                .HasColumnType("date");

                            b1.Property<double>("PesoAnimal")
                                .HasColumnType("double precision");

                            b1.HasKey("AnimalId", "__synthesizedOrdinal");

                            b1.ToTable("Animals");

                            b1.ToJson("HistoricoPeso");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsMany("DataFarm.Api.Domain.Animais.Aggregates.RegistroVacina", "HistoricoVacina", b1 =>
                        {
                            b1.Property<int>("AnimalId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateOnly>("DataAplicacao")
                                .HasColumnType("date");

                            b1.Property<int>("InsumoId")
                                .HasColumnType("integer");

                            b1.HasKey("AnimalId", "__synthesizedOrdinal");

                            b1.ToTable("Animals");

                            b1.ToJson("HistoricoVacina");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.Navigation("HistoricoPeso");

                    b.Navigation("HistoricoVacina");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.MeatPrice.PrecoCarne", b =>
                {
                    b.OwnsMany("DataFarm.Api.Domain.MeatPrice.Aggregates.Preco", "HistoricoPreco", b1 =>
                        {
                            b1.Property<int>("PrecoCarneId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<decimal>("DiferencaAnterior")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PrecoAtual")
                                .HasColumnType("numeric");

                            b1.Property<DateOnly>("UltimaAtualizacao")
                                .HasColumnType("date");

                            b1.HasKey("PrecoCarneId", "__synthesizedOrdinal");

                            b1.ToTable("PrecosCarne");

                            b1.ToJson("HistoricoPreco");

                            b1.WithOwner()
                                .HasForeignKey("PrecoCarneId");
                        });

                    b.Navigation("HistoricoPreco");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Purchase.Compra", b =>
                {
                    b.HasOne("DataFarm.Api.Domain.Purchase.Aggregates.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Sales.Venda", b =>
                {
                    b.HasOne("DataFarm.Api.Domain.Sales.Aggregates.Comprador", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DataFarm.Api.Domain.Sales.Aggregates.Frete", "Frete", b1 =>
                        {
                            b1.Property<int>("VendaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Destino")
                                .HasColumnType("text");

                            b1.Property<int>("QtdAnimais")
                                .HasColumnType("integer");

                            b1.Property<decimal>("ValorPrimeiroComboio")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("ValorSegundoComboio")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("ValorTotal")
                                .HasColumnType("numeric");

                            b1.Property<int>("VeiculoId")
                                .HasColumnType("integer");

                            b1.HasKey("VendaId");

                            b1.ToTable("Vendas");

                            b1.ToJson("Frete");

                            b1.WithOwner()
                                .HasForeignKey("VendaId");
                        });

                    b.Navigation("Comprador");

                    b.Navigation("Frete");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Shared.Insumo", b =>
                {
                    b.HasOne("DataFarm.Api.Domain.Purchase.Compra", null)
                        .WithMany("Itens")
                        .HasForeignKey("CompraId");

                    b.HasOne("DataFarm.Api.Domain.Stock.Estoque", "Estoque")
                        .WithMany("Itens")
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estoque");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Purchase.Compra", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("DataFarm.Api.Domain.Stock.Estoque", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
